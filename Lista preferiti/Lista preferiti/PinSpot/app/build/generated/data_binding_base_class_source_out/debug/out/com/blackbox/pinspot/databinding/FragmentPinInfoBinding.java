// Generated by view binder compiler. Do not edit!
package com.blackbox.pinspot.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.blackbox.pinspot.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentPinInfoBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView PinLatTextView;

  @NonNull
  public final TextView PinTitleTextView;

  @NonNull
  public final FloatingActionButton addPinToFavFab;

  @NonNull
  public final TextView pinLongTextView;

  private FragmentPinInfoBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView PinLatTextView, @NonNull TextView PinTitleTextView,
      @NonNull FloatingActionButton addPinToFavFab, @NonNull TextView pinLongTextView) {
    this.rootView = rootView;
    this.PinLatTextView = PinLatTextView;
    this.PinTitleTextView = PinTitleTextView;
    this.addPinToFavFab = addPinToFavFab;
    this.pinLongTextView = pinLongTextView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPinInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPinInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_pin_info, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPinInfoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.PinLat_textView;
      TextView PinLatTextView = ViewBindings.findChildViewById(rootView, id);
      if (PinLatTextView == null) {
        break missingId;
      }

      id = R.id.PinTitle_textView;
      TextView PinTitleTextView = ViewBindings.findChildViewById(rootView, id);
      if (PinTitleTextView == null) {
        break missingId;
      }

      id = R.id.addPinToFav_fab;
      FloatingActionButton addPinToFavFab = ViewBindings.findChildViewById(rootView, id);
      if (addPinToFavFab == null) {
        break missingId;
      }

      id = R.id.pinLong_textView;
      TextView pinLongTextView = ViewBindings.findChildViewById(rootView, id);
      if (pinLongTextView == null) {
        break missingId;
      }

      return new FragmentPinInfoBinding((ConstraintLayout) rootView, PinLatTextView,
          PinTitleTextView, addPinToFavFab, pinLongTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
